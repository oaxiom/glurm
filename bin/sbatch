#!/usr/bin/env python3

import sys
import os

from glurm import db

# Command-line options;
def prepare_parser():
    exmp = 'Example usage: te_count -i in.bam -o out.bam -g genome -m genes_tes'

    description = 'Counts up the number of reads that overlap some set of gene/TE or other features'

    parser = argparse.ArgumentParser(prog='te_count', description=description, epilog=exmp)

    # Optional:
    optional = parser._action_groups.pop()
    optional.add_argument('--se', action='store_true', required=False, help='Set mode to SE (single-end) mode, default is paired-end mode')
    optional.add_argument('--sc', action='store_true', required=False, help='Set te_count to single-cell mode, default is bulk. Expects an CR:Z flag in the BAM/SAM file. Make sure you set --se appropriately')
    optional.add_argument('--noumi', action='store_true', required=False, help='If --sc is set, but this single cell data has no UMI in a UR:Z tag, set this switch')
    optional.add_argument('--strand', action='store_true', required=False, help='Use the strand information for the reads (protocol is strand-specific), default=False')
    optional.add_argument('-q', '--qual', nargs=1, type=int, default=20, required=False, help='q threshold for qulait filtering, default=20')
    optional.add_argument('--maxcells', action='store', type=int, default=10000, required=False, help='keep at most maxcells with the most reads, default=10,000')
    optional.add_argument('-w', action='store', type=str, default='', required=False, help='A whitelist of barcodes. Becomes a requried argument of --sc')

    required = parser.add_argument_group('required arguments')

    required.add_argument('-i', '--inbam', nargs=1, required=True, help='the BAM alignment file containing the reads')
    required.add_argument('-o', '--outtsv', nargs=1, required=True, help='the TSV file to save the genes and count data to')
    required.add_argument('-g', '--genome', nargs=1, required=True, help='Genome assembly to use, valid genomes: {0}'.format(te_count.common.valid_assemblies))
    required.add_argument('-m', '--mode', nargs=1, required=True, help='Type of annotation to use, valid modes: {0}'.format(te_count.common.valid_modes))

    parser._action_groups.append(optional)

    logging.basicConfig(level=logging.DEBUG,
                    format='%(levelname)-8s: %(message)s',
                    datefmt='%m-%d %H:%M')

    parser.log = logging.getLogger('te_count')

    return parser

if __name__ == '__main__':
    db = db(no_init=True)

    jid = db.reserve_next_jid()

    print(f'Submitted Job {jid}')

