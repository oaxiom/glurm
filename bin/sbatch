#!/usr/bin/env python3

import sys
import os
import argparse
import logging

from glurm import db, parse_supported_SBATCH

# Command-line options;
def prepare_parser():
    exmp = 'Example usage: sbatch script.slurm'
    description = 'Slurm-like Glurm, single node job schedule emulator.'

    parser = argparse.ArgumentParser(prog='sbatch', description=description, epilog=exmp)

    # Optional:
    optional = parser._action_groups.pop()
    optional.add_argument('-c', '--cpus-per-task', action='store', type=int, default=1, required=False, help='number of cpus required per task, default=1')
    optional.add_argument('-e', '--error', action='store', type=int, default=1, required=False, help="File for batch script's standard error")
    optional.add_argument('--export', action='store', type=str, required=False, help='Specify environment variables to export')
    optional.add_argument('-J', '--job-name', action='store', type=str, required=False, help='Name of job')
    optional.add_argument('--mem', action='store', type=int, default=0, required=False, help='Minimum amount of real memory required')
    optional.add_argument('-o', '--output', action='store', type=str, required=False, help="file for batch script's standard output")

    required = parser.add_argument_group('required arguments')
    required.add_argument('script', type=str, nargs=1, help='slurm script to run')

    #required.add_argument('-i', '--inbam', nargs=1, required=True, help='the BAM alignment file containing the reads')

    parser._action_groups.append(optional)

    logging.basicConfig(level=logging.DEBUG,
                    format='%(levelname)-8s: %(message)s',
                    datefmt='%m-%d %H:%M')
    parser.log = logging.getLogger('glurm')

    return parser

if __name__ == '__main__':
    assert sys.version_info >= (3, 9), 'Python >=3.9 is required'

    script_path = os.path.dirname(os.path.realpath(__file__))
    parser = prepare_parser()
    args = parser.parse_args()

    log = parser.log

    print(args)

    # Step 1. Parse the slurm script to see if it's valid and grab any override operatives.
    slurm_script = args.script[0]
    if not os.path.exists(slurm_script):
        msg = f"Slurm script '{slurm_script}' not found"
        log.error(msg)
        sys.exit(msg)

    __found_shebang = False
    sbatches = []
    with open(slurm_script, 'rt') as oh:
        for line in oh:
            if '#!' in line: # I guess it has to be the first, but I just check it's there.
                __found_shebang = True
            elif '#SBATCH' in line:
                # An override
                sbatches.append(line)

    if sbatches:
        parse_supported_SBATCH(sbatches, args)

    if not __found_shebang:
        msg = f"Slurm script did not contain a #! line"
        log.error(msg)
        sys.exit(msg)

    db = db(log=log, init=False)

    # Step 2. Can we reserve this on the nodes?
    # Check CPUs
    if not db.node_can_accomodate_task(args.cpus_per_task): # TODO add memory and other asks.
        msg = f'Cannot find a Suitable node for CPUS={args.cpus_per_task}'
        log.error(msg)
        sys.exit(msg)

    # Step 3. Add the task to the queue
    jid = db.reserve_next_jid()

    if not args.job_name:
        args.job_name = f'glurm-{jid}'

    if not args.output:
        args.output = f'glurm-{jid}.out'

    if not args.error:
        args.output = f'glurm-{jid}.err'

    db.add_task(jid, args, os.getcwd())

    print(f'Submitted Job {jid}')

